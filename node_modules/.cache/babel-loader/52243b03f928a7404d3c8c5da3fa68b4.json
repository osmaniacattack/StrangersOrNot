{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/abdulosman/Desktop/StrangersGame/strangers-game/src/pages/game/liveplay/liveplay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport Card from \"../../../components/card/card\";\nimport { Grid } from \"@material-ui/core\";\nimport { Button } from \"@material-ui/core\";\nimport \"../../game/liveplay/liveplay.css\";\nexport default function LivePlay(props) {\n  _s();\n\n  let number = props.numberPerRound;\n  let questionCount = 1;\n  let questionArray;\n  useEffect(() => {\n    let questions = [];\n    let count = 0;\n    axios.get('https://strangers-or-not.firebaseio.com/.json').then(res => {\n      for (const [key, value] of Object.entries(res.data)) {\n        while (count < number) {\n          if (key == \"level1\") {\n            questions.push([\"Level 1: Perception\", value[Math.floor(Math.random() * value.length)]]);\n            count++;\n          } else if (key == \"level2\") {\n            questions.push([\"Level 2: Connection\", value[Math.floor(Math.random() * value.length)]]);\n            count++;\n          } else if (key == \"level3\") {\n            questions.push([\"Level 3: Reflection\", value[Math.floor(Math.random() * value.length)]]);\n            count++;\n          }\n        }\n\n        count = 0;\n      }\n\n      questionArray = questions;\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []);\n  const questionComponents = questionArray.map((question, index) => {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        sm: 2,\n        md: 2,\n        lg: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 8,\n        md: 8,\n        lg: 8,\n        className: \"gameStyling\",\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          className: \"numberStyling\",\n          children: [\"Card \", index, \"/\", number * 3]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          title: question[0],\n          question: question[1],\n          brand: \"Strangers or Not\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          className: \"prevButton prevNext\",\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          className: \"nextButton prevNext\",\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        sm: 2,\n        md: 2,\n        lg: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: questionComponents\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LivePlay, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = LivePlay;\n\nvar _c;\n\n$RefreshReg$(_c, \"LivePlay\");","map":{"version":3,"sources":["/Users/abdulosman/Desktop/StrangersGame/strangers-game/src/pages/game/liveplay/liveplay.js"],"names":["React","useState","useEffect","Typography","Card","Grid","Button","LivePlay","props","number","numberPerRound","questionCount","questionArray","questions","count","axios","get","then","res","key","value","Object","entries","data","push","Math","floor","random","length","catch","err","console","log","questionComponents","map","question","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { Typography } from \"@material-ui/core\"\nimport Card  from \"../../../components/card/card\"\nimport { Grid } from \"@material-ui/core\"\nimport { Button } from \"@material-ui/core\"\nimport \"../../game/liveplay/liveplay.css\"\n\nexport default function LivePlay(props){\n    let number = props.numberPerRound;\n\n    let questionCount = 1;\n    let questionArray;\n    useEffect(() => {\n        let questions = [];\n        let count = 0;\n        axios.get('https://strangers-or-not.firebaseio.com/.json')\n            .then(res => {\n                for (const [key, value] of Object.entries(res.data)){\n                    while (count < number){\n                        if (key == \"level1\"){\n                            questions.push([\"Level 1: Perception\", value[Math.floor((Math.random() * value.length))]]);\n                            count++;\n                        }\n                        else if (key == \"level2\"){\n                            questions.push([\"Level 2: Connection\", value[Math.floor((Math.random() * value.length))]]);\n                            count++;\n                        }\n                        else if (key == \"level3\"){\n                            questions.push([\"Level 3: Reflection\", value[Math.floor((Math.random() * value.length))]]);\n                            count++;\n                        }\n                    }\n                    count = 0;\n                }\n                questionArray = questions;\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    }, [])\n\n    const questionComponents = questionArray.map((question, index) => {\n        return <Grid container key={index}>\n            <Grid item sm={2} md={2} lg={2}></Grid>\n            <Grid item xs={12} sm={8} md={8} lg={8} className=\"gameStyling\">\n                <Typography variant=\"h5\" className=\"numberStyling\">Card {index}/{number*3}</Typography>\n                <Card title={question[0]} question={question[1]} brand=\"Strangers or Not\"/>\n                <Button variant=\"outlined\" className=\"prevButton prevNext\">Previous</Button>\n                <Button variant=\"outlined\" className=\"nextButton prevNext\">Next</Button>\n            </Grid>\n            <Grid item sm={2} md={2} lg={2}></Grid>\n        </Grid>\n    })\n\n    return (\n        <div>\n            {questionComponents}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}