{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/abdulosman/Documents/GitHub/StrangersOrNot/src/pages/game/liveplay/liveplay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Container } from \"@material-ui/core\";\nimport { Typography } from \"@material-ui/core\";\nimport Card from \"../../../components/card/card\";\nimport { Grid } from \"@material-ui/core\";\nimport { Button } from \"@material-ui/core\";\nimport \"../../game/liveplay/liveplay.css\";\nimport axios from 'axios'; // The component that the actual game runs on. Calls API and renders game conditionally using currentId\n\nexport default function LivePlay(props) {\n  _s();\n\n  let number = props.numberPerRound; // receives number of cards per round from parent component\n\n  let [questionArray, setQuestionArray] = React.useState([]); // questions from API are stored here\n\n  let [currentId, setCurrentId] = React.useState(0); // current question number used to keep track of level type\n\n  useEffect(() => {\n    let questions = [];\n    let count = 0;\n    axios.get('https://strangers-or-not.firebaseio.com/.json').then(res => {\n      let tempSet = new Set();\n\n      for (const [key, value] of Object.entries(res.data)) {\n        let tempArr = [];\n\n        while (count < number) {\n          let card_value = value[Math.floor(Math.random() * value.length)];\n\n          if (key === \"level1\") {\n            if (!tempArr.includes(card_value)) {\n              // section pushes cards to one big array and checks for no repeated cards\n              tempArr.push(card_value);\n              questions.push([\"Level 1: Perception\", card_value]);\n              count++;\n            }\n          } else if (key === \"level2\") {\n            if (!tempArr.includes(card_value)) {\n              tempArr.push(card_value);\n              questions.push([\"Level 2: Connection\", card_value]);\n              count++;\n            }\n          } else if (key === \"level3\") {\n            if (!tempArr.includes(card_value)) {\n              tempArr.push(card_value);\n              questions.push([\"Level 3: Reflection\", card_value]);\n              count++;\n            }\n          }\n        }\n\n        count = 0;\n      }\n\n      console.log(questions);\n      questions.push([\"FINAL CARD\", \"EACH PLAYER SEND A MESSAGE TO THE OTHER. OPEN ONLY ONCE THE GAME HAS CONCLUDED.\"]);\n      setQuestionArray(questions);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []);\n\n  function handlePrevious() {\n    // decrements the currentId to take the previous question\n    setCurrentId(currentId - 1);\n  }\n\n  function handleNext() {\n    // increments the currentId to take the next question\n    setCurrentId(currentId + 1);\n  }\n\n  return (\n    /*#__PURE__*/\n    // conditional rendering of the question cards only once the questions have loaded\n    _jsxDEV(Container, {\n      children: questionArray.length > 0 ? /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 1,\n          sm: 2,\n          md: 2,\n          lg: 2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 10,\n          sm: 8,\n          md: 8,\n          lg: 8,\n          className: \"gameStyling\",\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            className: \"numberStyling\",\n            children: [\"Card \", currentId + 1, \"/\", number * 3 + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Card, {\n            title: questionArray[currentId][0],\n            question: questionArray[currentId][1],\n            brand: \"Strangers or Not\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            disabled: currentId < 1,\n            variant: \"outlined\",\n            className: \"prevButton prevNext\",\n            onClick: handlePrevious,\n            children: \"Previous\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            disabled: currentId >= number * 3,\n            variant: \"outlined\",\n            className: \"nextButton prevNext\",\n            onClick: handleNext,\n            children: currentId + 1 >= number * 3 ? 'Final Card' : 'Next'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 1,\n          sm: 2,\n          md: 2,\n          lg: 2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }, this)]\n      }, currentId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this) : 'loading...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(LivePlay, \"F97Pq6c0OO+M27XEu25yHsKH9j0=\");\n\n_c = LivePlay;\n\nvar _c;\n\n$RefreshReg$(_c, \"LivePlay\");","map":{"version":3,"sources":["/Users/abdulosman/Documents/GitHub/StrangersOrNot/src/pages/game/liveplay/liveplay.js"],"names":["React","useState","useEffect","Container","Typography","Card","Grid","Button","axios","LivePlay","props","number","numberPerRound","questionArray","setQuestionArray","currentId","setCurrentId","questions","count","get","then","res","tempSet","Set","key","value","Object","entries","data","tempArr","card_value","Math","floor","random","length","includes","push","console","log","catch","err","handlePrevious","handleNext"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { Container } from \"@material-ui/core\"\nimport { Typography } from \"@material-ui/core\"\nimport Card  from \"../../../components/card/card\"\nimport { Grid } from \"@material-ui/core\"\nimport { Button } from \"@material-ui/core\"\nimport \"../../game/liveplay/liveplay.css\"\nimport axios from 'axios';\n\n// The component that the actual game runs on. Calls API and renders game conditionally using currentId\n\nexport default function LivePlay(props){\n    let number = props.numberPerRound; // receives number of cards per round from parent component\n    let [questionArray, setQuestionArray] = React.useState([]) // questions from API are stored here\n    let [currentId, setCurrentId] = React.useState(0); // current question number used to keep track of level type\n     \n    useEffect(() => {\n        let questions = [];\n        let count = 0;\n        axios.get('https://strangers-or-not.firebaseio.com/.json')\n            .then(res => {\n                let tempSet = new Set();\n                for (const [key, value] of Object.entries(res.data)){\n                    let tempArr = [];\n                    while (count < number){\n                        let card_value = value[Math.floor((Math.random() * value.length))];\n                        if (key === \"level1\"){\n                            if(!tempArr.includes(card_value)){ // section pushes cards to one big array and checks for no repeated cards\n                                tempArr.push(card_value);\n                                questions.push([\"Level 1: Perception\", card_value]);\n                                count++;\n                            }\n                        }\n                        else if (key === \"level2\"){\n                            if(!tempArr.includes(card_value)){\n                                tempArr.push(card_value);\n                                questions.push([\"Level 2: Connection\", card_value]);\n                                count++;\n                            }\n                        }\n                        else if (key === \"level3\"){\n                            if(!tempArr.includes(card_value)){\n                                tempArr.push(card_value);\n                                questions.push([\"Level 3: Reflection\", card_value]);\n                                count++;\n                            }\n                        }\n                    }\n                    count = 0;\n                }\n                console.log(questions);\n                questions.push([\"FINAL CARD\", \"EACH PLAYER SEND A MESSAGE TO THE OTHER. OPEN ONLY ONCE THE GAME HAS CONCLUDED.\"])\n                setQuestionArray(questions);\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    }, [])\n\n    function handlePrevious() {\n        // decrements the currentId to take the previous question\n        setCurrentId(currentId - 1);\n    }\n\n    function handleNext() {\n        // increments the currentId to take the next question\n        setCurrentId(currentId + 1);\n    }\n    \n    return (\n        // conditional rendering of the question cards only once the questions have loaded\n        <Container>\n            {questionArray.length > 0? \n            <Grid container key={currentId}>\n                <Grid item xs={1} sm={2} md={2} lg={2}></Grid>\n                <Grid item xs={10} sm={8} md={8} lg={8} className=\"gameStyling\">\n                    <Typography variant=\"h5\" className=\"numberStyling\">Card {currentId+1}/{number*3+1}</Typography>\n\n                    <Card title={questionArray[currentId][0]} question={questionArray[currentId][1]} brand=\"Strangers or Not\"/>\n                    <Button disabled={currentId < 1} \n                            variant=\"outlined\" \n                            className=\"prevButton prevNext\" \n                            onClick={handlePrevious}>Previous</Button>\n\n                    <Button disabled={currentId >= number*3}\n                            variant=\"outlined\"\n                            className=\"nextButton prevNext\" \n                            onClick={handleNext}>\n                            {currentId+1 >= number*3 ? 'Final Card' : 'Next'}</Button>\n                </Grid>\n                <Grid item xs={1} sm={2} md={2} lg={2}></Grid>\n\n            </Grid>\n        : 'loading...'}\n        </Container>\n    )\n}"]},"metadata":{},"sourceType":"module"}