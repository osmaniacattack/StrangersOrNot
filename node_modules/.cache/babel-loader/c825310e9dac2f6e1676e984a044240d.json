{"ast":null,"code":"import _slicedToArray from\"/Users/abdulosman/Documents/GitHub/StrangersOrNot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import React,{useState,useEffect}from\"react\";import{Typography}from\"@material-ui/core\";import Card from\"../../../components/card/card\";import{Grid}from\"@material-ui/core\";import{Button}from\"@material-ui/core\";import\"../../game/liveplay/liveplay.css\";import axios from'axios';// The component that the actual game runs on. Calls API and renders game conditionally using currentId\nexport default function LivePlay(props){var number=props.numberPerRound;// receives number of cards per round from parent component\nvar _React$useState=React.useState([]),_React$useState2=_slicedToArray(_React$useState,2),questionArray=_React$useState2[0],setQuestionArray=_React$useState2[1];// questions from API are stored here\nvar _React$useState3=React.useState(0),_React$useState4=_slicedToArray(_React$useState3,2),currentId=_React$useState4[0],setCurrentId=_React$useState4[1];// current question number used to keep track of level type\nuseEffect(function(){var questions=[];var count=0;axios.get('https://strangers-or-not.firebaseio.com/.json').then(function(res){var tempSet=new Set();for(var _i=0,_Object$entries=Object.entries(res.data);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),key=_Object$entries$_i[0],value=_Object$entries$_i[1];var tempArr=[];while(count<number){var card_value=value[Math.floor(Math.random()*value.length)];if(key===\"level1\"){if(!tempArr.includes(card_value)){tempArr.push(card_value);questions.push([\"Level 1: Perception\",card_value]);count++;}}else if(key===\"level2\"){if(!tempArr.includes(card_value)){tempArr.push(card_value);questions.push([\"Level 2: Connection\",card_value]);count++;}}else if(key===\"level3\"){if(!tempArr.includes(card_value)){tempArr.push(card_value);questions.push([\"Level 3: Reflection\",card_value]);count++;}}}count=0;}console.log(questions);questions.push([\"FINAL CARD\",\"EACH PLAYER SEND A MESSAGE TO THE OTHER. OPEN ONLY ONCE THE GAME HAS CONCLUDED.\"]);setQuestionArray(questions);}).catch(function(err){console.log(err);});},[]);function handlePrevious(){// decrements the currentId to take the previous question\nsetCurrentId(currentId-1);}function handleNext(){// increments the currentId to take the next question\nsetCurrentId(currentId+1);}return/*#__PURE__*/ (// conditional rendering of the question cards only once the questions have loaded\n_jsx(\"div\",{children:questionArray.length>0?/*#__PURE__*/_jsxs(Grid,{container:true,children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:1,sm:2,md:2,lg:2}),/*#__PURE__*/_jsxs(Grid,{item:true,xs:10,sm:8,md:8,lg:8,className:\"gameStyling\",children:[/*#__PURE__*/_jsxs(Typography,{variant:\"h5\",className:\"numberStyling\",children:[\"Card \",currentId+1,\"/\",number*3+1]}),/*#__PURE__*/_jsx(Card,{title:questionArray[currentId][0],question:questionArray[currentId][1],brand:\"Strangers or Not\"}),/*#__PURE__*/_jsx(Button,{disabled:currentId<1,variant:\"outlined\",className:\"prevButton prevNext\",onClick:handlePrevious,children:\"Previous\"}),/*#__PURE__*/_jsx(Button,{disabled:currentId>=number*3,variant:\"outlined\",className:\"nextButton prevNext\",onClick:handleNext,children:currentId+1>=number*3?'Final Card':'Next'})]}),/*#__PURE__*/_jsx(Grid,{item:true,xs:1,sm:2,md:2,lg:2})]},currentId):'loading...'}));}","map":{"version":3,"sources":["/Users/abdulosman/Documents/GitHub/StrangersOrNot/src/pages/game/liveplay/liveplay.js"],"names":["React","useState","useEffect","Typography","Card","Grid","Button","axios","LivePlay","props","number","numberPerRound","questionArray","setQuestionArray","currentId","setCurrentId","questions","count","get","then","res","tempSet","Set","Object","entries","data","key","value","tempArr","card_value","Math","floor","random","length","includes","push","console","log","catch","err","handlePrevious","handleNext"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { Typography } from \"@material-ui/core\"\nimport Card  from \"../../../components/card/card\"\nimport { Grid } from \"@material-ui/core\"\nimport { Button } from \"@material-ui/core\"\nimport \"../../game/liveplay/liveplay.css\"\nimport axios from 'axios';\n\n// The component that the actual game runs on. Calls API and renders game conditionally using currentId\n\nexport default function LivePlay(props){\n    let number = props.numberPerRound; // receives number of cards per round from parent component\n    let [questionArray, setQuestionArray] = React.useState([]) // questions from API are stored here\n    let [currentId, setCurrentId] = React.useState(0); // current question number used to keep track of level type\n     \n    useEffect(() => {\n        let questions = [];\n        let count = 0;\n        axios.get('https://strangers-or-not.firebaseio.com/.json')\n            .then(res => {\n                let tempSet = new Set();\n                for (const [key, value] of Object.entries(res.data)){\n                    let tempArr = [];\n                    while (count < number){\n                        let card_value = value[Math.floor((Math.random() * value.length))];\n                        if (key === \"level1\"){\n                            if(!tempArr.includes(card_value)){\n                                tempArr.push(card_value);\n                                questions.push([\"Level 1: Perception\", card_value]);\n                                count++;\n                            }\n                        }\n                        else if (key === \"level2\"){\n                            if(!tempArr.includes(card_value)){\n                                tempArr.push(card_value);\n                                questions.push([\"Level 2: Connection\", card_value]);\n                                count++;\n                            }\n                        }\n                        else if (key === \"level3\"){\n                            if(!tempArr.includes(card_value)){\n                                tempArr.push(card_value);\n                                questions.push([\"Level 3: Reflection\", card_value]);\n                                count++;\n                            }\n                        }\n                    }\n                    count = 0;\n                }\n                console.log(questions);\n                questions.push([\"FINAL CARD\", \"EACH PLAYER SEND A MESSAGE TO THE OTHER. OPEN ONLY ONCE THE GAME HAS CONCLUDED.\"])\n                setQuestionArray(questions);\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    }, [])\n\n    function handlePrevious() {\n        // decrements the currentId to take the previous question\n        setCurrentId(currentId - 1);\n    }\n\n    function handleNext() {\n        // increments the currentId to take the next question\n        setCurrentId(currentId + 1);\n    }\n    \n    return (\n        // conditional rendering of the question cards only once the questions have loaded\n        <div>\n            {questionArray.length > 0? \n            <Grid container key={currentId}>\n                <Grid item xs={1} sm={2} md={2} lg={2}></Grid>\n                <Grid item xs={10} sm={8} md={8} lg={8} className=\"gameStyling\">\n                    <Typography variant=\"h5\" className=\"numberStyling\">Card {currentId+1}/{number*3+1}</Typography>\n\n                    <Card title={questionArray[currentId][0]} question={questionArray[currentId][1]} brand=\"Strangers or Not\"/>\n                    <Button disabled={currentId < 1} \n                            variant=\"outlined\" \n                            className=\"prevButton prevNext\" \n                            onClick={handlePrevious}>Previous</Button>\n\n                    <Button disabled={currentId >= number*3}\n                            variant=\"outlined\"\n                            className=\"nextButton prevNext\" \n                            onClick={handleNext}>\n                            {currentId+1 >= number*3 ? 'Final Card' : 'Next'}</Button>\n                </Grid>\n                <Grid item xs={1} sm={2} md={2} lg={2}></Grid>\n\n            </Grid>\n        : 'loading...'}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}